% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coxDKplsDR.R, R/coxDKplsDR.default.R,
%   R/coxDKplsDR.formula.R
\name{coxDKplsDR}
\alias{coxDKplsDR}
\alias{coxDKplsDR.default}
\alias{coxDKplsDR.formula}
\title{Fitting a Direct Kernel PLS model on the (Deviance) Residuals}
\usage{
coxDKplsDR(Xplan, ...)

\method{coxDKplsDR}{default}(
  Xplan,
  time,
  time2,
  event,
  type,
  origin,
  typeres = "deviance",
  collapse,
  weighted,
  scaleX = TRUE,
  scaleY = TRUE,
  ncomp = min(7, ncol(Xplan)),
  modepls = "regression",
  plot = FALSE,
  allres = FALSE,
  kernel = "rbfdot",
  hyperkernel,
  verbose = TRUE,
  ...
)

\method{coxDKplsDR}{formula}(
  Xplan,
  time,
  time2,
  event,
  type,
  origin,
  typeres = "deviance",
  collapse,
  weighted,
  scaleX = TRUE,
  scaleY = TRUE,
  ncomp = min(7, ncol(Xplan)),
  modepls = "regression",
  plot = FALSE,
  allres = FALSE,
  dataXplan = NULL,
  subset,
  weights,
  model_frame = FALSE,
  kernel = "rbfdot",
  hyperkernel,
  verbose = TRUE,
  model_matrix = FALSE,
  contrasts.arg = NULL,
  ...
)
}
\arguments{
\item{Xplan}{a formula or a matrix with the eXplanatory variables (training)
dataset}

\item{\dots}{Arguments to be passed on to \code{survival::coxph}.}

\item{time}{for right censored data, this is the follow up time. For
interval data, the first argument is the starting time for the interval.}

\item{time2}{The status indicator, normally 0=alive, 1=dead. Other choices
are \code{TRUE/FALSE} (\code{TRUE} = death) or 1/2 (2=death). For interval
censored data, the status indicator is 0=right censored, 1=event at
\code{time}, 2=left censored, 3=interval censored. Although unusual, the
event indicator can be omitted, in which case all subjects are assumed to
have an event.}

\item{event}{ending time of the interval for interval censored or counting
process data only. Intervals are assumed to be open on the left and closed
on the right, \code{(start, end]}. For counting process data, event
indicates whether an event occurred at the end of the interval.}

\item{type}{character string specifying the type of censoring. Possible
values are \code{"right"}, \code{"left"}, \code{"counting"},
\code{"interval"}, or \code{"interval2"}. The default is \code{"right"} or
\code{"counting"} depending on whether the \code{time2} argument is absent
or present, respectively.}

\item{origin}{for counting process data, the hazard function origin. This
option was intended to be used in conjunction with a model containing time
dependent strata in order to align the subjects properly when they cross
over from one strata to another, but it has rarely proven useful.}

\item{typeres}{character string indicating the type of residual desired.
Possible values are \code{"martingale"}, \code{"deviance"}, \code{"score"},
\code{"schoenfeld"}, \code{"dfbeta"}, \code{"dfbetas"}, and
\code{"scaledsch"}. Only enough of the string to determine a unique match is
required.}

\item{collapse}{vector indicating which rows to collapse (sum) over. In
time-dependent models more than one row data can pertain to a single
individual. If there were 4 individuals represented by 3, 1, 2 and 4 rows of
data respectively, then \code{collapse=c(1,1,1,2,3,3,4,4,4,4)} could be used
to obtain per subject rather than per observation residuals.}

\item{weighted}{if \code{TRUE} and the model was fit with case weights, then
the weighted residuals are returned.}

\item{scaleX}{Should the \code{Xplan} columns be standardized ?}

\item{scaleY}{Should the \code{time} values be standardized ?}

\item{ncomp}{The number of components to include in the model. The number of
components to fit is specified with the argument ncomp. It this is not
supplied, the maximal number of components is used.}

\item{modepls}{character string. What type of algorithm to use, (partially)
matching one of "regression", "canonical", "invariant" or "classic". See
\code{\link[mixOmics]{pls}} for details}

\item{plot}{Should the survival function be plotted ?)}

\item{allres}{FALSE to return only the Cox model and TRUE for additionnal
results. See details. Defaults to FALSE.}

\item{kernel}{the kernel function used in training and predicting. This
parameter can be set to any function, of class kernel, which computes the
inner product in feature space between two vector arguments (see
\link[kernlab]{kernels}). The \code{kernlab} package provides the most
popular kernel functions which can be used by setting the kernel parameter
to the following strings: \describe{ \item{list("rbfdot")}{Radial Basis
kernel "Gaussian"} \item{list("polydot")}{Polynomial kernel}
\item{list("vanilladot")}{Linear kernel} \item{list("tanhdot")}{Hyperbolic
tangent kernel} \item{list("laplacedot")}{Laplacian kernel}
\item{list("besseldot")}{Bessel kernel} \item{list("anovadot")}{ANOVA RBF
kernel} \item{list("splinedot")}{Spline kernel} }}

\item{hyperkernel}{the list of hyper-parameters (kernel parameters). This is
a list which contains the parameters to be used with the kernel function.
For valid parameters for existing kernels are : \itemize{ \item
\code{sigma}, inverse kernel width for the Radial Basis kernel function
"rbfdot" and the Laplacian kernel "laplacedot".  \item \code{degree},
\code{scale}, \code{offset} for the Polynomial kernel "polydot".  \item
\code{scale}, offset for the Hyperbolic tangent kernel function "tanhdot".
\item \code{sigma}, \code{order}, \code{degree} for the Bessel kernel
"besseldot".  \item \code{sigma}, \code{degree} for the ANOVA kernel
"anovadot".  } In the case of a Radial Basis kernel function (Gaussian) or
Laplacian kernel, if \code{hyperkernel} is missing, the heuristics in sigest
are used to calculate a good sigma value from the data.}

\item{verbose}{Should some details be displayed ?}

\item{dataXplan}{an optional data frame, list or environment (or object
coercible by \code{\link{as.data.frame}} to a data frame) containing the
variables in the model. If not found in \code{dataXplan}, the variables are
taken from \code{environment(Xplan)}, typically the environment from which
\code{coxDKplsDR} is called.}

\item{subset}{an optional vector specifying a subset of observations to be
used in the fitting process.}

\item{weights}{an optional vector of 'prior weights' to be used in the
fitting process. Should be \code{NULL} or a numeric vector.}

\item{model_frame}{If \code{TRUE}, the model frame is returned.}

\item{model_matrix}{If \code{TRUE}, the model matrix is returned.}

\item{contrasts.arg}{a list, whose entries are values (numeric matrices, 
functions or character strings naming functions) to be used as replacement 
values for the contrasts replacement function and whose names are the names 
of columns of data containing factors.}
}
\value{
If \code{allres=FALSE} : \item{cox_DKplsDR}{Final Cox-model.} If
\code{allres=TRUE} : \item{tt_DKplsDR}{PLSR components.}
\item{cox_DKplsDR}{Final Cox-model.} \item{DKplsDR_mod}{The PLSR model.}
}
\description{
This function computes the Cox Model based on PLSR components computed model
with \itemize{\item as the response: the Residuals of a Cox-Model fitted with no covariate
\item as explanatory variables: a Kernel transform of Xplan.}
It uses the package \code{kernlab} to compute the Kernel
transforms of Xplan, then the package \code{mixOmics} to perform PLSR fit.
}
\details{
If \code{allres=FALSE} returns only the final Cox-model. If
\code{allres=TRUE} returns a list with the PLS components, the final
Cox-model and the PLSR model. \code{allres=TRUE} is useful for evluating
model prediction accuracy on a test sample.
}
\examples{

data(micro.censure)
data(Xmicro.censure_compl_imp)

X_train_micro <- apply((as.matrix(Xmicro.censure_compl_imp)),FUN="as.numeric",MARGIN=2)[1:80,]
X_train_micro_df <- data.frame(X_train_micro)
Y_train_micro <- micro.censure$survyear[1:80]
C_train_micro <- micro.censure$DC[1:80]

(cox_DKplsDR_fit=coxDKplsDR(X_train_micro,Y_train_micro,C_train_micro,ncomp=6))

#Fixing sigma to compare with plsDR on Gram matrix; should be identical
(cox_DKplsDR_fit=coxDKplsDR(X_train_micro,Y_train_micro,C_train_micro,ncomp=6,
hyperkernel=list(sigma=0.01292786)))

X_train_micro_kern <- kernlab::kernelMatrix(kernlab::rbfdot(sigma=0.01292786),
scale(X_train_micro))
(cox_DKplsDR_fit2=coxplsDR(~X_train_micro_kern,Y_train_micro,C_train_micro,ncomp=6,scaleX=FALSE))

(cox_DKplsDR_fit=coxDKplsDR(X_train_micro,Y_train_micro,C_train_micro,ncomp=6,
kernel="laplacedot",hyperkernel=list(sigma=0.01292786)))

X_train_micro_kern <- kernlab::kernelMatrix(kernlab::laplacedot(sigma=0.01292786),
scale(X_train_micro))
(cox_DKplsDR_fit2=coxplsDR(~X_train_micro_kern,Y_train_micro,C_train_micro,ncomp=6,scaleX=FALSE))

(cox_DKplsDR_fit=coxDKplsDR(~X_train_micro,Y_train_micro,C_train_micro,ncomp=6))
(cox_DKplsDR_fit=coxDKplsDR(~.,Y_train_micro,C_train_micro,ncomp=6,dataXplan=X_train_micro_df))

(cox_DKplsDR_fit=coxDKplsDR(X_train_micro,Y_train_micro,C_train_micro,ncomp=6,allres=TRUE))
(cox_DKplsDR_fit=coxDKplsDR(~X_train_micro,Y_train_micro,C_train_micro,ncomp=6,allres=TRUE))
(cox_DKplsDR_fit=coxDKplsDR(~.,Y_train_micro,C_train_micro,ncomp=6,allres=TRUE,
dataXplan=X_train_micro_df))


rm(X_train_micro,Y_train_micro,C_train_micro,cox_DKplsDR_fit)

}
\references{
plsRcox, Cox-Models in a high dimensional setting in R, Frederic
Bertrand, Philippe Bastien, Nicolas Meyer and Myriam Maumy-Bertrand (2014).
Proceedings of User2014!, Los Angeles, page 152.\cr

Deviance residuals-based sparse PLS and sparse kernel PLS regression for
censored data, Philippe Bastien, Frederic Bertrand, Nicolas Meyer and Myriam
Maumy-Bertrand (2015), Bioinformatics, 31(3):397-404,
doi:10.1093/bioinformatics/btu660.
}
\seealso{
\code{\link[survival]{coxph}}, \code{\link[pls]{plsr}}
}
\author{
Frédéric Bertrand\cr
\email{frederic.bertrand@utt.fr}\cr
\url{http://www-irma.u-strasbg.fr/~fbertran/}
}
\keyword{models}
\keyword{regression}
